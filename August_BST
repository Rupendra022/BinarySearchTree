1. Validate Binary Search Tree >- 
Approach 1..>- Perform inorder traversal on bst and store  the elements in list and then check if list is sorted then the bst is valid otherwise invalid.
class Solution {
    public void inorder(TreeNode root, ArrayList<Integer> lst) {
        if (root == null)
            return;

        inorder(root.left, lst);
        lst.add(root.val);
        inorder(root.right, lst);
    }

    public boolean isValidBST(TreeNode root) {

        ArrayList<Integer> lst = new ArrayList<>();
        inorder(root, lst);

        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) <= lst.get(i - 1)) {
                return false;
            }
        }

        return true;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Insert into a BST >- (RECURSIVE APPROACH)
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        // If tree is empty, create a new node and return
        if (root == null) {
            return new TreeNode(val);
        }

        TreeNode curr = root;

        while (true) {
            if (val < curr.val) {
                // Go left
                if (curr.left == null) {
                    curr.left = new TreeNode(val);
                    break; // insertion done
                } else {
                    curr = curr.left; 
                }
            } else {
                // Go right
                if (curr.right == null) {
                    curr.right = new TreeNode(val);
                    break; // insertion done
                } else {
                    curr = curr.right; 
                }
            }
        }

        return root; // return original root
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------
3. Insert into BST >- (ITERATIVE APPROACH ) 
 Node current = root ; 
        if(root==null){
            root = new Node(key);
            return root ; 
        }
        
        while(true){
            if(key<current.data){
                if(current.left==null){
                    current.left = new Node(key);
                    break ;
                }
                else{
                    current = current.left ; 
                }
            }
            else if(current.data<key){
                if(current.right==null){
                    current.right = new Node(key);
                    break ;
                }
                else{
                    current = current.right ;
                    
                }
            }
            else{
                return root ;
            }
        }
        
        return root ;

------------------------------------------------------------------------------------------------------------------------------------------------
